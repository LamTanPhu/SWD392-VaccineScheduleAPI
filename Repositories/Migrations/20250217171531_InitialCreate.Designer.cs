// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Context;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250217171531_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("IRepositories.Entity.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VaccineCenterId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("VaccineCenterId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("IRepositories.Entity.ChildrenProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountId1")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AccountId1");

                    b.ToTable("ChildrenProfiles");
                });

            modelBuilder.Entity("IRepositories.Entity.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrderId1")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId1");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("IRepositories.Entity.Manufacturer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActiveStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("IRepositories.Entity.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChildrenProfileId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FeedbackId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalOrderPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildrenProfileId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("ProfileId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IRepositories.Entity.OrderPackageDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("VaccinePackageId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("VaccinePackageId");

                    b.ToTable("OrderPackageDetails");
                });

            modelBuilder.Entity("IRepositories.Entity.OrderVaccineDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderId1")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("int");

                    b.Property<string>("VaccineId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("VaccineId");

                    b.ToTable("OrderVaccineDetails");
                });

            modelBuilder.Entity("IRepositories.Entity.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinationSchedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AdministeredBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ChildrenProfileId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoseNumber")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OrderPackageDetailsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("OrderVaccineDetailsId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("VaccineCenterId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("ChildrenProfileId");

                    b.HasIndex("OrderPackageDetailsId");

                    b.HasIndex("OrderVaccineDetailsId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("VaccineCenterId");

                    b.ToTable("VaccinationSchedules");
                });

            modelBuilder.Entity("IRepositories.Entity.Vaccine", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("BetweenPeriod")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IngredientsDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.Property<int>("UnitOfVolume")
                        .HasColumnType("int");

                    b.Property<string>("VaccineCategoryId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VaccineCategoryId");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineBatch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ActiveStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ManufacturerId1")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("VaccineCenterId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ManufacturerId1");

                    b.HasIndex("VaccineCenterId");

                    b.ToTable("VaccineBatches");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("VaccineCategories");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineCenter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VaccineCenters");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AdministeredBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AdministeredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CenterId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentationProvided")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VaccineId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("VerifiedStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CenterId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineHistories");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinePackage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PackageDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PackageStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VaccinePackages");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinePackageDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PackagePrice")
                        .HasColumnType("int");

                    b.Property<string>("VaccineId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VaccinePackageId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VaccinePackageId1")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("VaccineId");

                    b.HasIndex("VaccinePackageId");

                    b.HasIndex("VaccinePackageId1");

                    b.ToTable("VaccinePackageDetails");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineReaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReactionTime")
                        .HasColumnType("int");

                    b.Property<int?>("ResolvedTime")
                        .HasColumnType("int");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VaccinationScheduleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VaccineScheduleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("VaccinationScheduleId");

                    b.HasIndex("VaccineScheduleId");

                    b.ToTable("VaccineReactions");
                });

            modelBuilder.Entity("IRepositories.Entity.Account", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccineCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccineCenter", null)
                        .WithMany("Accounts")
                        .HasForeignKey("VaccineCenterId");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("IRepositories.Entity.ChildrenProfile", b =>
                {
                    b.HasOne("IRepositories.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.Account", null)
                        .WithMany("ChildrenProfiles")
                        .HasForeignKey("AccountId1");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("IRepositories.Entity.Feedback", b =>
                {
                    b.HasOne("IRepositories.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IRepositories.Entity.Order", b =>
                {
                    b.HasOne("IRepositories.Entity.ChildrenProfile", null)
                        .WithMany("Orders")
                        .HasForeignKey("ChildrenProfileId");

                    b.HasOne("IRepositories.Entity.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IRepositories.Entity.ChildrenProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IRepositories.Entity.OrderPackageDetails", b =>
                {
                    b.HasOne("IRepositories.Entity.Order", "Order")
                        .WithMany("OrderPackageDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccinePackage", "VaccinePackage")
                        .WithMany()
                        .HasForeignKey("VaccinePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("VaccinePackage");
                });

            modelBuilder.Entity("IRepositories.Entity.OrderVaccineDetails", b =>
                {
                    b.HasOne("IRepositories.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.Order", null)
                        .WithMany("OrderVaccineDetails")
                        .HasForeignKey("OrderId1");

                    b.HasOne("IRepositories.Entity.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("IRepositories.Entity.Payment", b =>
                {
                    b.HasOne("IRepositories.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinationSchedule", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccineCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.ChildrenProfile", null)
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("ChildrenProfileId");

                    b.HasOne("IRepositories.Entity.OrderPackageDetails", "OrderPackageDetails")
                        .WithMany()
                        .HasForeignKey("OrderPackageDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IRepositories.Entity.OrderVaccineDetails", "OrderVaccineDetails")
                        .WithMany()
                        .HasForeignKey("OrderVaccineDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IRepositories.Entity.ChildrenProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccineCenter", null)
                        .WithMany("VaccinationSchedules")
                        .HasForeignKey("VaccineCenterId");

                    b.Navigation("Center");

                    b.Navigation("OrderPackageDetails");

                    b.Navigation("OrderVaccineDetails");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IRepositories.Entity.Vaccine", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccineBatch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccineCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccineCategory", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("VaccineCategoryId");

                    b.Navigation("Batch");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineBatch", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccineCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.Manufacturer", null)
                        .WithMany("VaccineBatches")
                        .HasForeignKey("ManufacturerId1");

                    b.HasOne("IRepositories.Entity.VaccineCenter", null)
                        .WithMany("VaccineBatches")
                        .HasForeignKey("VaccineCenterId");

                    b.Navigation("Center");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineCategory", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccineCategory", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineHistory", b =>
                {
                    b.HasOne("IRepositories.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccineCenter", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.ChildrenProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Center");

                    b.Navigation("Profile");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinePackageDetail", b =>
                {
                    b.HasOne("IRepositories.Entity.Vaccine", "Vaccine")
                        .WithMany()
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccinePackage", "VaccinePackage")
                        .WithMany()
                        .HasForeignKey("VaccinePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IRepositories.Entity.VaccinePackage", null)
                        .WithMany("PackageDetails")
                        .HasForeignKey("VaccinePackageId1");

                    b.Navigation("Vaccine");

                    b.Navigation("VaccinePackage");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineReaction", b =>
                {
                    b.HasOne("IRepositories.Entity.VaccinationSchedule", null)
                        .WithMany("VaccineReactions")
                        .HasForeignKey("VaccinationScheduleId");

                    b.HasOne("IRepositories.Entity.VaccinationSchedule", "VaccineSchedule")
                        .WithMany()
                        .HasForeignKey("VaccineScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VaccineSchedule");
                });

            modelBuilder.Entity("IRepositories.Entity.Account", b =>
                {
                    b.Navigation("ChildrenProfiles");
                });

            modelBuilder.Entity("IRepositories.Entity.ChildrenProfile", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("VaccinationSchedules");
                });

            modelBuilder.Entity("IRepositories.Entity.Manufacturer", b =>
                {
                    b.Navigation("VaccineBatches");
                });

            modelBuilder.Entity("IRepositories.Entity.Order", b =>
                {
                    b.Navigation("OrderPackageDetails");

                    b.Navigation("OrderVaccineDetails");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinationSchedule", b =>
                {
                    b.Navigation("VaccineReactions");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineCategory", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccineCenter", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("VaccinationSchedules");

                    b.Navigation("VaccineBatches");
                });

            modelBuilder.Entity("IRepositories.Entity.VaccinePackage", b =>
                {
                    b.Navigation("PackageDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
